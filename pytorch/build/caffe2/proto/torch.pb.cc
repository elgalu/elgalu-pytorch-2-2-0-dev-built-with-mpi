// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2/proto/torch.proto

#include "caffe2/proto/torch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_caffe2_2fproto_2fcaffe2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Argument_caffe2_2fproto_2fcaffe2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_caffe2_2fproto_2ftorch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttributeDef_caffe2_2fproto_2ftorch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_caffe2_2fproto_2ftorch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ModuleDef_caffe2_2fproto_2ftorch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_caffe2_2fproto_2ftorch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParameterDef_caffe2_2fproto_2ftorch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_caffe2_2fproto_2ftorch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordRef_caffe2_2fproto_2ftorch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_caffe2_2fproto_2ftorch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorDef_caffe2_2fproto_2ftorch_2eproto;
namespace torch {
class RecordRefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordRef> _instance;
} _RecordRef_default_instance_;
class TensorDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorDef> _instance;
} _TensorDef_default_instance_;
class AttributeDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttributeDef> _instance;
} _AttributeDef_default_instance_;
class ParameterDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParameterDef> _instance;
} _ParameterDef_default_instance_;
class ModuleDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModuleDef> _instance;
} _ModuleDef_default_instance_;
class LibDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LibDef> _instance;
} _LibDef_default_instance_;
class ModelDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelDef> _instance;
} _ModelDef_default_instance_;
}  // namespace torch
static void InitDefaultsscc_info_AttributeDef_caffe2_2fproto_2ftorch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::torch::_AttributeDef_default_instance_;
    new (ptr) ::torch::AttributeDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::torch::AttributeDef::InitAsDefaultInstance();
}

TORCH_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttributeDef_caffe2_2fproto_2ftorch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AttributeDef_caffe2_2fproto_2ftorch_2eproto}, {}};

static void InitDefaultsscc_info_LibDef_caffe2_2fproto_2ftorch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::torch::_LibDef_default_instance_;
    new (ptr) ::torch::LibDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::torch::LibDef::InitAsDefaultInstance();
}

TORCH_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LibDef_caffe2_2fproto_2ftorch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LibDef_caffe2_2fproto_2ftorch_2eproto}, {
      &scc_info_RecordRef_caffe2_2fproto_2ftorch_2eproto.base,}};

static void InitDefaultsscc_info_ModelDef_caffe2_2fproto_2ftorch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::torch::_ModelDef_default_instance_;
    new (ptr) ::torch::ModelDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::torch::ModelDef::InitAsDefaultInstance();
}

TORCH_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelDef_caffe2_2fproto_2ftorch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelDef_caffe2_2fproto_2ftorch_2eproto}, {
      &scc_info_ModuleDef_caffe2_2fproto_2ftorch_2eproto.base,
      &scc_info_TensorDef_caffe2_2fproto_2ftorch_2eproto.base,}};

static void InitDefaultsscc_info_ModuleDef_caffe2_2fproto_2ftorch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::torch::_ModuleDef_default_instance_;
    new (ptr) ::torch::ModuleDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::torch::ModuleDef::InitAsDefaultInstance();
}

TORCH_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ModuleDef_caffe2_2fproto_2ftorch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ModuleDef_caffe2_2fproto_2ftorch_2eproto}, {
      &scc_info_RecordRef_caffe2_2fproto_2ftorch_2eproto.base,
      &scc_info_Argument_caffe2_2fproto_2fcaffe2_2eproto.base,
      &scc_info_ParameterDef_caffe2_2fproto_2ftorch_2eproto.base,
      &scc_info_AttributeDef_caffe2_2fproto_2ftorch_2eproto.base,}};

static void InitDefaultsscc_info_ParameterDef_caffe2_2fproto_2ftorch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::torch::_ParameterDef_default_instance_;
    new (ptr) ::torch::ParameterDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::torch::ParameterDef::InitAsDefaultInstance();
}

TORCH_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParameterDef_caffe2_2fproto_2ftorch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParameterDef_caffe2_2fproto_2ftorch_2eproto}, {}};

static void InitDefaultsscc_info_RecordRef_caffe2_2fproto_2ftorch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::torch::_RecordRef_default_instance_;
    new (ptr) ::torch::RecordRef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::torch::RecordRef::InitAsDefaultInstance();
}

TORCH_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordRef_caffe2_2fproto_2ftorch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecordRef_caffe2_2fproto_2ftorch_2eproto}, {}};

static void InitDefaultsscc_info_TensorDef_caffe2_2fproto_2ftorch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::torch::_TensorDef_default_instance_;
    new (ptr) ::torch::TensorDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::torch::TensorDef::InitAsDefaultInstance();
}

TORCH_API ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorDef_caffe2_2fproto_2ftorch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TensorDef_caffe2_2fproto_2ftorch_2eproto}, {
      &scc_info_RecordRef_caffe2_2fproto_2ftorch_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_caffe2_2fproto_2ftorch_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_caffe2_2fproto_2ftorch_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_caffe2_2fproto_2ftorch_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_caffe2_2fproto_2ftorch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::torch::RecordRef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::torch::RecordRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::torch::RecordRef, key_),
  0,
  PROTOBUF_FIELD_OFFSET(::torch::TensorDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::torch::TensorDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::torch::TensorDef, dims_),
  PROTOBUF_FIELD_OFFSET(::torch::TensorDef, offset_),
  PROTOBUF_FIELD_OFFSET(::torch::TensorDef, strides_),
  PROTOBUF_FIELD_OFFSET(::torch::TensorDef, requires_grad_),
  PROTOBUF_FIELD_OFFSET(::torch::TensorDef, data_type_),
  PROTOBUF_FIELD_OFFSET(::torch::TensorDef, data_),
  PROTOBUF_FIELD_OFFSET(::torch::TensorDef, device_),
  PROTOBUF_FIELD_OFFSET(::torch::TensorDef, is_quantized_),
  PROTOBUF_FIELD_OFFSET(::torch::TensorDef, scale_),
  PROTOBUF_FIELD_OFFSET(::torch::TensorDef, zero_point_),
  ~0u,
  2,
  ~0u,
  4,
  3,
  1,
  0,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::torch::AttributeDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::torch::AttributeDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::torch::AttributeDef, type_),
  PROTOBUF_FIELD_OFFSET(::torch::AttributeDef, name_),
  PROTOBUF_FIELD_OFFSET(::torch::AttributeDef, id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::torch::ParameterDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::torch::ParameterDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::torch::ParameterDef, is_buffer_),
  PROTOBUF_FIELD_OFFSET(::torch::ParameterDef, tensor_id_),
  PROTOBUF_FIELD_OFFSET(::torch::ParameterDef, name_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::torch::ModuleDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::torch::ModuleDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::torch::ModuleDef, submodules_),
  PROTOBUF_FIELD_OFFSET(::torch::ModuleDef, torchscript_arena_),
  PROTOBUF_FIELD_OFFSET(::torch::ModuleDef, caffe2_nets_),
  PROTOBUF_FIELD_OFFSET(::torch::ModuleDef, pickle_arena_),
  PROTOBUF_FIELD_OFFSET(::torch::ModuleDef, cpp_arena_),
  PROTOBUF_FIELD_OFFSET(::torch::ModuleDef, parameters_),
  PROTOBUF_FIELD_OFFSET(::torch::ModuleDef, name_),
  PROTOBUF_FIELD_OFFSET(::torch::ModuleDef, optimize_),
  PROTOBUF_FIELD_OFFSET(::torch::ModuleDef, attributes_),
  PROTOBUF_FIELD_OFFSET(::torch::ModuleDef, get_state_attribute_id_),
  PROTOBUF_FIELD_OFFSET(::torch::ModuleDef, torchscript_debug_arena_),
  ~0u,
  1,
  ~0u,
  2,
  3,
  ~0u,
  0,
  6,
  ~0u,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::torch::LibDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::torch::LibDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::torch::LibDef, torchscript_arena_),
  0,
  PROTOBUF_FIELD_OFFSET(::torch::ModelDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::torch::ModelDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::torch::ModelDef, proto_version_),
  PROTOBUF_FIELD_OFFSET(::torch::ModelDef, main_module_),
  PROTOBUF_FIELD_OFFSET(::torch::ModelDef, producer_name_),
  PROTOBUF_FIELD_OFFSET(::torch::ModelDef, producer_version_),
  PROTOBUF_FIELD_OFFSET(::torch::ModelDef, tensors_),
  3,
  2,
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::torch::RecordRef)},
  { 7, 22, sizeof(::torch::TensorDef)},
  { 32, 40, sizeof(::torch::AttributeDef)},
  { 43, 51, sizeof(::torch::ParameterDef)},
  { 54, 70, sizeof(::torch::ModuleDef)},
  { 81, 87, sizeof(::torch::LibDef)},
  { 88, 98, sizeof(::torch::ModelDef)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::torch::_RecordRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::torch::_TensorDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::torch::_AttributeDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::torch::_ParameterDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::torch::_ModuleDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::torch::_LibDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::torch::_ModelDef_default_instance_),
};

const char descriptor_table_protodef_caffe2_2fproto_2ftorch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030caffe2/proto/torch.proto\022\005torch\032\031caffe"
  "2/proto/caffe2.proto\"\030\n\tRecordRef\022\013\n\003key"
  "\030\001 \001(\t\"\353\001\n\tTensorDef\022\014\n\004dims\030\001 \003(\003\022\016\n\006of"
  "fset\030\002 \001(\003\022\017\n\007strides\030\003 \003(\003\022\025\n\rrequires_"
  "grad\030\004 \001(\010\022/\n\tdata_type\030\005 \001(\0162\034.caffe2.T"
  "ensorProto.DataType\022\036\n\004data\030\006 \001(\0132\020.torc"
  "h.RecordRef\022\016\n\006device\030\007 \001(\t\022\024\n\014is_quanti"
  "zed\030\010 \001(\010\022\r\n\005scale\030\t \001(\001\022\022\n\nzero_point\030\n"
  " \001(\003\"6\n\014AttributeDef\022\014\n\004type\030\001 \002(\t\022\014\n\004na"
  "me\030\002 \002(\t\022\n\n\002id\030\003 \002(\003\"B\n\014ParameterDef\022\021\n\t"
  "is_buffer\030\001 \001(\010\022\021\n\ttensor_id\030\002 \001(\003\022\014\n\004na"
  "me\030\003 \001(\t\"\225\003\n\tModuleDef\022$\n\nsubmodules\030\001 \003"
  "(\0132\020.torch.ModuleDef\022+\n\021torchscript_aren"
  "a\030\002 \001(\0132\020.torch.RecordRef\022#\n\013caffe2_nets"
  "\030\003 \003(\0132\016.caffe2.NetDef\022&\n\014pickle_arena\030\004"
  " \001(\0132\020.torch.RecordRef\022#\n\tcpp_arena\030\005 \001("
  "\0132\020.torch.RecordRef\022\'\n\nparameters\030\006 \003(\0132"
  "\023.torch.ParameterDef\022\014\n\004name\030\007 \001(\t\022\020\n\010op"
  "timize\030\010 \001(\010\022\'\n\nattributes\030\t \003(\0132\023.torch"
  ".AttributeDef\022\036\n\026get_state_attribute_id\030"
  "\n \001(\003\0221\n\027torchscript_debug_arena\030\013 \001(\0132\020"
  ".torch.RecordRef\"5\n\006LibDef\022+\n\021torchscrip"
  "t_arena\030\001 \001(\0132\020.torch.RecordRef\"\250\001\n\010Mode"
  "lDef\022\025\n\rproto_version\030\001 \001(\003\022%\n\013main_modu"
  "le\030\002 \001(\0132\020.torch.ModuleDef\022\025\n\rproducer_n"
  "ame\030\003 \001(\t\022\030\n\020producer_version\030\004 \001(\t\022!\n\007t"
  "ensors\030\005 \003(\0132\020.torch.TensorDefJ\004\010\t\020\nR\004li"
  "bs*(\n\014ProtoVersion\022\030\n\024PROTO_VERSION_NEWE"
  "ST\020\006"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_caffe2_2fproto_2ftorch_2eproto_deps[1] = {
  &::descriptor_table_caffe2_2fproto_2fcaffe2_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_caffe2_2fproto_2ftorch_2eproto_sccs[7] = {
  &scc_info_AttributeDef_caffe2_2fproto_2ftorch_2eproto.base,
  &scc_info_LibDef_caffe2_2fproto_2ftorch_2eproto.base,
  &scc_info_ModelDef_caffe2_2fproto_2ftorch_2eproto.base,
  &scc_info_ModuleDef_caffe2_2fproto_2ftorch_2eproto.base,
  &scc_info_ParameterDef_caffe2_2fproto_2ftorch_2eproto.base,
  &scc_info_RecordRef_caffe2_2fproto_2ftorch_2eproto.base,
  &scc_info_TensorDef_caffe2_2fproto_2ftorch_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_caffe2_2fproto_2ftorch_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_caffe2_2fproto_2ftorch_2eproto = {
  false, false, descriptor_table_protodef_caffe2_2fproto_2ftorch_2eproto, "caffe2/proto/torch.proto", 1124,
  &descriptor_table_caffe2_2fproto_2ftorch_2eproto_once, descriptor_table_caffe2_2fproto_2ftorch_2eproto_sccs, descriptor_table_caffe2_2fproto_2ftorch_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_caffe2_2fproto_2ftorch_2eproto::offsets,
  file_level_metadata_caffe2_2fproto_2ftorch_2eproto, 7, file_level_enum_descriptors_caffe2_2fproto_2ftorch_2eproto, file_level_service_descriptors_caffe2_2fproto_2ftorch_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_caffe2_2fproto_2ftorch_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_caffe2_2fproto_2ftorch_2eproto)), true);
namespace torch {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_caffe2_2fproto_2ftorch_2eproto);
  return file_level_enum_descriptors_caffe2_2fproto_2ftorch_2eproto[0];
}
bool ProtoVersion_IsValid(int value) {
  switch (value) {
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RecordRef::InitAsDefaultInstance() {
}
class RecordRef::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordRef>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecordRef::RecordRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:torch.RecordRef)
}
RecordRef::RecordRef(const RecordRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:torch.RecordRef)
}

void RecordRef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordRef_caffe2_2fproto_2ftorch_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RecordRef::~RecordRef() {
  // @@protoc_insertion_point(destructor:torch.RecordRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecordRef::ArenaDtor(void* object) {
  RecordRef* _this = reinterpret_cast< RecordRef* >(object);
  (void)_this;
}
void RecordRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordRef& RecordRef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordRef_caffe2_2fproto_2ftorch_2eproto.base);
  return *internal_default_instance();
}


void RecordRef::Clear() {
// @@protoc_insertion_point(message_clear_start:torch.RecordRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "torch.RecordRef.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:torch.RecordRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "torch.RecordRef.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:torch.RecordRef)
  return target;
}

size_t RecordRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:torch.RecordRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:torch.RecordRef)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:torch.RecordRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:torch.RecordRef)
    MergeFrom(*source);
  }
}

void RecordRef::MergeFrom(const RecordRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:torch.RecordRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_set_key(from._internal_key());
  }
}

void RecordRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:torch.RecordRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordRef::CopyFrom(const RecordRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:torch.RecordRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRef::IsInitialized() const {
  return true;
}

void RecordRef::InternalSwap(RecordRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TensorDef::InitAsDefaultInstance() {
  ::torch::_TensorDef_default_instance_._instance.get_mutable()->data_ = const_cast< ::torch::RecordRef*>(
      ::torch::RecordRef::internal_default_instance());
}
class TensorDef::_Internal {
 public:
  using HasBits = decltype(std::declval<TensorDef>()._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_requires_grad(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::torch::RecordRef& data(const TensorDef* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_quantized(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_zero_point(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::torch::RecordRef&
TensorDef::_Internal::data(const TensorDef* msg) {
  return *msg->data_;
}
TensorDef::TensorDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dims_(arena),
  strides_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:torch.TensorDef)
}
TensorDef::TensorDef(const TensorDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dims_(from.dims_),
      strides_(from.strides_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device()) {
    device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device(),
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::torch::RecordRef(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&zero_point_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(zero_point_));
  // @@protoc_insertion_point(copy_constructor:torch.TensorDef)
}

void TensorDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TensorDef_caffe2_2fproto_2ftorch_2eproto.base);
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zero_point_) -
      reinterpret_cast<char*>(&data_)) + sizeof(zero_point_));
}

TensorDef::~TensorDef() {
  // @@protoc_insertion_point(destructor:torch.TensorDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TensorDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void TensorDef::ArenaDtor(void* object) {
  TensorDef* _this = reinterpret_cast< TensorDef* >(object);
  (void)_this;
}
void TensorDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorDef& TensorDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensorDef_caffe2_2fproto_2ftorch_2eproto.base);
  return *internal_default_instance();
}


void TensorDef::Clear() {
// @@protoc_insertion_point(message_clear_start:torch.TensorDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  strides_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      device_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zero_point_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(zero_point_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 dims = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 strides = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_strides(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_strides(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool requires_grad = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_requires_grad(&has_bits);
          requires_grad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .caffe2.TensorProto.DataType data_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::caffe2::TensorProto_DataType_IsValid(val))) {
            _internal_set_data_type(static_cast<::caffe2::TensorProto_DataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .torch.RecordRef data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string device = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "torch.TensorDef.device");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_quantized = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_quantized(&has_bits);
          is_quantized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double scale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 zero_point = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_zero_point(&has_bits);
          zero_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:torch.TensorDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  for (int i = 0, n = this->_internal_dims_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_dims(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 offset = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // repeated int64 strides = 3;
  for (int i = 0, n = this->_internal_strides_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_strides(i), target);
  }

  // optional bool requires_grad = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_requires_grad(), target);
  }

  // optional .caffe2.TensorProto.DataType data_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_data_type(), target);
  }

  // optional .torch.RecordRef data = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::data(this), target, stream);
  }

  // optional string device = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "torch.TensorDef.device");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_device(), target);
  }

  // optional bool is_quantized = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_quantized(), target);
  }

  // optional double scale = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_scale(), target);
  }

  // optional int64 zero_point = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_zero_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:torch.TensorDef)
  return target;
}

size_t TensorDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:torch.TensorDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dims_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dims_size());
    total_size += data_size;
  }

  // repeated int64 strides = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->strides_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_strides_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string device = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device());
    }

    // optional .torch.RecordRef data = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional int64 offset = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_offset());
    }

    // optional .caffe2.TensorProto.DataType data_type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
    }

    // optional bool requires_grad = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_quantized = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional double scale = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int64 zero_point = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_zero_point());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:torch.TensorDef)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:torch.TensorDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:torch.TensorDef)
    MergeFrom(*source);
  }
}

void TensorDef::MergeFrom(const TensorDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:torch.TensorDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  strides_.MergeFrom(from.strides_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_device(from._internal_device());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_data()->::torch::RecordRef::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      data_type_ = from.data_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      requires_grad_ = from.requires_grad_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_quantized_ = from.is_quantized_;
    }
    if (cached_has_bits & 0x00000040u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000080u) {
      zero_point_ = from.zero_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TensorDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:torch.TensorDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorDef::CopyFrom(const TensorDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:torch.TensorDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorDef::IsInitialized() const {
  return true;
}

void TensorDef::InternalSwap(TensorDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dims_.InternalSwap(&other->dims_);
  strides_.InternalSwap(&other->strides_);
  device_.Swap(&other->device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorDef, zero_point_)
      + sizeof(TensorDef::zero_point_)
      - PROTOBUF_FIELD_OFFSET(TensorDef, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttributeDef::InitAsDefaultInstance() {
}
class AttributeDef::_Internal {
 public:
  using HasBits = decltype(std::declval<AttributeDef>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AttributeDef::AttributeDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:torch.AttributeDef)
}
AttributeDef::AttributeDef(const AttributeDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:torch.AttributeDef)
}

void AttributeDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttributeDef_caffe2_2fproto_2ftorch_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

AttributeDef::~AttributeDef() {
  // @@protoc_insertion_point(destructor:torch.AttributeDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttributeDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AttributeDef::ArenaDtor(void* object) {
  AttributeDef* _this = reinterpret_cast< AttributeDef* >(object);
  (void)_this;
}
void AttributeDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttributeDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttributeDef& AttributeDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttributeDef_caffe2_2fproto_2ftorch_2eproto.base);
  return *internal_default_instance();
}


void AttributeDef::Clear() {
// @@protoc_insertion_point(message_clear_start:torch.AttributeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "torch.AttributeDef.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "torch.AttributeDef.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttributeDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:torch.AttributeDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "torch.AttributeDef.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "torch.AttributeDef.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required int64 id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:torch.AttributeDef)
  return target;
}

size_t AttributeDef::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:torch.AttributeDef)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_id()) {
    // required int64 id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  return total_size;
}
size_t AttributeDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:torch.AttributeDef)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int64 id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttributeDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:torch.AttributeDef)
  GOOGLE_DCHECK_NE(&from, this);
  const AttributeDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttributeDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:torch.AttributeDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:torch.AttributeDef)
    MergeFrom(*source);
  }
}

void AttributeDef::MergeFrom(const AttributeDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:torch.AttributeDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AttributeDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:torch.AttributeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeDef::CopyFrom(const AttributeDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:torch.AttributeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeDef::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AttributeDef::InternalSwap(AttributeDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParameterDef::InitAsDefaultInstance() {
}
class ParameterDef::_Internal {
 public:
  using HasBits = decltype(std::declval<ParameterDef>()._has_bits_);
  static void set_has_is_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ParameterDef::ParameterDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:torch.ParameterDef)
}
ParameterDef::ParameterDef(const ParameterDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&tensor_id_, &from.tensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_buffer_) -
    reinterpret_cast<char*>(&tensor_id_)) + sizeof(is_buffer_));
  // @@protoc_insertion_point(copy_constructor:torch.ParameterDef)
}

void ParameterDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParameterDef_caffe2_2fproto_2ftorch_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_buffer_) -
      reinterpret_cast<char*>(&tensor_id_)) + sizeof(is_buffer_));
}

ParameterDef::~ParameterDef() {
  // @@protoc_insertion_point(destructor:torch.ParameterDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParameterDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParameterDef::ArenaDtor(void* object) {
  ParameterDef* _this = reinterpret_cast< ParameterDef* >(object);
  (void)_this;
}
void ParameterDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParameterDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParameterDef& ParameterDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParameterDef_caffe2_2fproto_2ftorch_2eproto.base);
  return *internal_default_instance();
}


void ParameterDef::Clear() {
// @@protoc_insertion_point(message_clear_start:torch.ParameterDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&tensor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_buffer_) -
        reinterpret_cast<char*>(&tensor_id_)) + sizeof(is_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParameterDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_buffer(&has_bits);
          is_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 tensor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tensor_id(&has_bits);
          tensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "torch.ParameterDef.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParameterDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:torch.ParameterDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_buffer = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_buffer(), target);
  }

  // optional int64 tensor_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_tensor_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "torch.ParameterDef.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:torch.ParameterDef)
  return target;
}

size_t ParameterDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:torch.ParameterDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int64 tensor_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_tensor_id());
    }

    // optional bool is_buffer = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParameterDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:torch.ParameterDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ParameterDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParameterDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:torch.ParameterDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:torch.ParameterDef)
    MergeFrom(*source);
  }
}

void ParameterDef::MergeFrom(const ParameterDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:torch.ParameterDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      tensor_id_ = from.tensor_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_buffer_ = from.is_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParameterDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:torch.ParameterDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterDef::CopyFrom(const ParameterDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:torch.ParameterDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterDef::IsInitialized() const {
  return true;
}

void ParameterDef::InternalSwap(ParameterDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParameterDef, is_buffer_)
      + sizeof(ParameterDef::is_buffer_)
      - PROTOBUF_FIELD_OFFSET(ParameterDef, tensor_id_)>(
          reinterpret_cast<char*>(&tensor_id_),
          reinterpret_cast<char*>(&other->tensor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParameterDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModuleDef::InitAsDefaultInstance() {
  ::torch::_ModuleDef_default_instance_._instance.get_mutable()->torchscript_arena_ = const_cast< ::torch::RecordRef*>(
      ::torch::RecordRef::internal_default_instance());
  ::torch::_ModuleDef_default_instance_._instance.get_mutable()->pickle_arena_ = const_cast< ::torch::RecordRef*>(
      ::torch::RecordRef::internal_default_instance());
  ::torch::_ModuleDef_default_instance_._instance.get_mutable()->cpp_arena_ = const_cast< ::torch::RecordRef*>(
      ::torch::RecordRef::internal_default_instance());
  ::torch::_ModuleDef_default_instance_._instance.get_mutable()->torchscript_debug_arena_ = const_cast< ::torch::RecordRef*>(
      ::torch::RecordRef::internal_default_instance());
}
class ModuleDef::_Internal {
 public:
  using HasBits = decltype(std::declval<ModuleDef>()._has_bits_);
  static const ::torch::RecordRef& torchscript_arena(const ModuleDef* msg);
  static void set_has_torchscript_arena(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::torch::RecordRef& pickle_arena(const ModuleDef* msg);
  static void set_has_pickle_arena(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::torch::RecordRef& cpp_arena(const ModuleDef* msg);
  static void set_has_cpp_arena(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optimize(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_get_state_attribute_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::torch::RecordRef& torchscript_debug_arena(const ModuleDef* msg);
  static void set_has_torchscript_debug_arena(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::torch::RecordRef&
ModuleDef::_Internal::torchscript_arena(const ModuleDef* msg) {
  return *msg->torchscript_arena_;
}
const ::torch::RecordRef&
ModuleDef::_Internal::pickle_arena(const ModuleDef* msg) {
  return *msg->pickle_arena_;
}
const ::torch::RecordRef&
ModuleDef::_Internal::cpp_arena(const ModuleDef* msg) {
  return *msg->cpp_arena_;
}
const ::torch::RecordRef&
ModuleDef::_Internal::torchscript_debug_arena(const ModuleDef* msg) {
  return *msg->torchscript_debug_arena_;
}
void ModuleDef::clear_caffe2_nets() {
  caffe2_nets_.Clear();
}
ModuleDef::ModuleDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  submodules_(arena),
  caffe2_nets_(arena),
  parameters_(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:torch.ModuleDef)
}
ModuleDef::ModuleDef(const ModuleDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      submodules_(from.submodules_),
      caffe2_nets_(from.caffe2_nets_),
      parameters_(from.parameters_),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_torchscript_arena()) {
    torchscript_arena_ = new ::torch::RecordRef(*from.torchscript_arena_);
  } else {
    torchscript_arena_ = nullptr;
  }
  if (from._internal_has_pickle_arena()) {
    pickle_arena_ = new ::torch::RecordRef(*from.pickle_arena_);
  } else {
    pickle_arena_ = nullptr;
  }
  if (from._internal_has_cpp_arena()) {
    cpp_arena_ = new ::torch::RecordRef(*from.cpp_arena_);
  } else {
    cpp_arena_ = nullptr;
  }
  if (from._internal_has_torchscript_debug_arena()) {
    torchscript_debug_arena_ = new ::torch::RecordRef(*from.torchscript_debug_arena_);
  } else {
    torchscript_debug_arena_ = nullptr;
  }
  ::memcpy(&get_state_attribute_id_, &from.get_state_attribute_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&optimize_) -
    reinterpret_cast<char*>(&get_state_attribute_id_)) + sizeof(optimize_));
  // @@protoc_insertion_point(copy_constructor:torch.ModuleDef)
}

void ModuleDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModuleDef_caffe2_2fproto_2ftorch_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&torchscript_arena_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optimize_) -
      reinterpret_cast<char*>(&torchscript_arena_)) + sizeof(optimize_));
}

ModuleDef::~ModuleDef() {
  // @@protoc_insertion_point(destructor:torch.ModuleDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModuleDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete torchscript_arena_;
  if (this != internal_default_instance()) delete pickle_arena_;
  if (this != internal_default_instance()) delete cpp_arena_;
  if (this != internal_default_instance()) delete torchscript_debug_arena_;
}

void ModuleDef::ArenaDtor(void* object) {
  ModuleDef* _this = reinterpret_cast< ModuleDef* >(object);
  (void)_this;
}
void ModuleDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModuleDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModuleDef& ModuleDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModuleDef_caffe2_2fproto_2ftorch_2eproto.base);
  return *internal_default_instance();
}


void ModuleDef::Clear() {
// @@protoc_insertion_point(message_clear_start:torch.ModuleDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  submodules_.Clear();
  caffe2_nets_.Clear();
  parameters_.Clear();
  attributes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(torchscript_arena_ != nullptr);
      torchscript_arena_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pickle_arena_ != nullptr);
      pickle_arena_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cpp_arena_ != nullptr);
      cpp_arena_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(torchscript_debug_arena_ != nullptr);
      torchscript_debug_arena_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&get_state_attribute_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optimize_) -
        reinterpret_cast<char*>(&get_state_attribute_id_)) + sizeof(optimize_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .torch.ModuleDef submodules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_submodules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .torch.RecordRef torchscript_arena = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_torchscript_arena(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .caffe2.NetDef caffe2_nets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_caffe2_nets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .torch.RecordRef pickle_arena = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pickle_arena(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .torch.RecordRef cpp_arena = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpp_arena(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .torch.ParameterDef parameters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "torch.ModuleDef.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool optimize = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_optimize(&has_bits);
          optimize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .torch.AttributeDef attributes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 get_state_attribute_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_get_state_attribute_id(&has_bits);
          get_state_attribute_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .torch.RecordRef torchscript_debug_arena = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_torchscript_debug_arena(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModuleDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:torch.ModuleDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .torch.ModuleDef submodules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_submodules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_submodules(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .torch.RecordRef torchscript_arena = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::torchscript_arena(this), target, stream);
  }

  // repeated .caffe2.NetDef caffe2_nets = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_caffe2_nets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_caffe2_nets(i), target, stream);
  }

  // optional .torch.RecordRef pickle_arena = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pickle_arena(this), target, stream);
  }

  // optional .torch.RecordRef cpp_arena = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cpp_arena(this), target, stream);
  }

  // repeated .torch.ParameterDef parameters = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_parameters(i), target, stream);
  }

  // optional string name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "torch.ModuleDef.name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_name(), target);
  }

  // optional bool optimize = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_optimize(), target);
  }

  // repeated .torch.AttributeDef attributes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_attributes(i), target, stream);
  }

  // optional int64 get_state_attribute_id = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_get_state_attribute_id(), target);
  }

  // optional .torch.RecordRef torchscript_debug_arena = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::torchscript_debug_arena(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:torch.ModuleDef)
  return target;
}

size_t ModuleDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:torch.ModuleDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .torch.ModuleDef submodules = 1;
  total_size += 1UL * this->_internal_submodules_size();
  for (const auto& msg : this->submodules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .caffe2.NetDef caffe2_nets = 3;
  total_size += 1UL * this->_internal_caffe2_nets_size();
  for (const auto& msg : this->caffe2_nets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .torch.ParameterDef parameters = 6;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .torch.AttributeDef attributes = 9;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .torch.RecordRef torchscript_arena = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *torchscript_arena_);
    }

    // optional .torch.RecordRef pickle_arena = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pickle_arena_);
    }

    // optional .torch.RecordRef cpp_arena = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cpp_arena_);
    }

    // optional .torch.RecordRef torchscript_debug_arena = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *torchscript_debug_arena_);
    }

    // optional int64 get_state_attribute_id = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_get_state_attribute_id());
    }

    // optional bool optimize = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModuleDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:torch.ModuleDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ModuleDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModuleDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:torch.ModuleDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:torch.ModuleDef)
    MergeFrom(*source);
  }
}

void ModuleDef::MergeFrom(const ModuleDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:torch.ModuleDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  submodules_.MergeFrom(from.submodules_);
  caffe2_nets_.MergeFrom(from.caffe2_nets_);
  parameters_.MergeFrom(from.parameters_);
  attributes_.MergeFrom(from.attributes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_torchscript_arena()->::torch::RecordRef::MergeFrom(from._internal_torchscript_arena());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pickle_arena()->::torch::RecordRef::MergeFrom(from._internal_pickle_arena());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_cpp_arena()->::torch::RecordRef::MergeFrom(from._internal_cpp_arena());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_torchscript_debug_arena()->::torch::RecordRef::MergeFrom(from._internal_torchscript_debug_arena());
    }
    if (cached_has_bits & 0x00000020u) {
      get_state_attribute_id_ = from.get_state_attribute_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      optimize_ = from.optimize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModuleDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:torch.ModuleDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleDef::CopyFrom(const ModuleDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:torch.ModuleDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleDef::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(submodules_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(caffe2_nets_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attributes_)) return false;
  return true;
}

void ModuleDef::InternalSwap(ModuleDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  submodules_.InternalSwap(&other->submodules_);
  caffe2_nets_.InternalSwap(&other->caffe2_nets_);
  parameters_.InternalSwap(&other->parameters_);
  attributes_.InternalSwap(&other->attributes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModuleDef, optimize_)
      + sizeof(ModuleDef::optimize_)
      - PROTOBUF_FIELD_OFFSET(ModuleDef, torchscript_arena_)>(
          reinterpret_cast<char*>(&torchscript_arena_),
          reinterpret_cast<char*>(&other->torchscript_arena_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LibDef::InitAsDefaultInstance() {
  ::torch::_LibDef_default_instance_._instance.get_mutable()->torchscript_arena_ = const_cast< ::torch::RecordRef*>(
      ::torch::RecordRef::internal_default_instance());
}
class LibDef::_Internal {
 public:
  using HasBits = decltype(std::declval<LibDef>()._has_bits_);
  static const ::torch::RecordRef& torchscript_arena(const LibDef* msg);
  static void set_has_torchscript_arena(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::torch::RecordRef&
LibDef::_Internal::torchscript_arena(const LibDef* msg) {
  return *msg->torchscript_arena_;
}
LibDef::LibDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:torch.LibDef)
}
LibDef::LibDef(const LibDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_torchscript_arena()) {
    torchscript_arena_ = new ::torch::RecordRef(*from.torchscript_arena_);
  } else {
    torchscript_arena_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:torch.LibDef)
}

void LibDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LibDef_caffe2_2fproto_2ftorch_2eproto.base);
  torchscript_arena_ = nullptr;
}

LibDef::~LibDef() {
  // @@protoc_insertion_point(destructor:torch.LibDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LibDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete torchscript_arena_;
}

void LibDef::ArenaDtor(void* object) {
  LibDef* _this = reinterpret_cast< LibDef* >(object);
  (void)_this;
}
void LibDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LibDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LibDef& LibDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LibDef_caffe2_2fproto_2ftorch_2eproto.base);
  return *internal_default_instance();
}


void LibDef::Clear() {
// @@protoc_insertion_point(message_clear_start:torch.LibDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(torchscript_arena_ != nullptr);
    torchscript_arena_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LibDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .torch.RecordRef torchscript_arena = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_torchscript_arena(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LibDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:torch.LibDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .torch.RecordRef torchscript_arena = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::torchscript_arena(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:torch.LibDef)
  return target;
}

size_t LibDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:torch.LibDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .torch.RecordRef torchscript_arena = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *torchscript_arena_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LibDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:torch.LibDef)
  GOOGLE_DCHECK_NE(&from, this);
  const LibDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LibDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:torch.LibDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:torch.LibDef)
    MergeFrom(*source);
  }
}

void LibDef::MergeFrom(const LibDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:torch.LibDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_torchscript_arena()) {
    _internal_mutable_torchscript_arena()->::torch::RecordRef::MergeFrom(from._internal_torchscript_arena());
  }
}

void LibDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:torch.LibDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LibDef::CopyFrom(const LibDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:torch.LibDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibDef::IsInitialized() const {
  return true;
}

void LibDef::InternalSwap(LibDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(torchscript_arena_, other->torchscript_arena_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LibDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelDef::InitAsDefaultInstance() {
  ::torch::_ModelDef_default_instance_._instance.get_mutable()->main_module_ = const_cast< ::torch::ModuleDef*>(
      ::torch::ModuleDef::internal_default_instance());
}
class ModelDef::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelDef>()._has_bits_);
  static void set_has_proto_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::torch::ModuleDef& main_module(const ModelDef* msg);
  static void set_has_main_module(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_producer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_producer_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::torch::ModuleDef&
ModelDef::_Internal::main_module(const ModelDef* msg) {
  return *msg->main_module_;
}
ModelDef::ModelDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tensors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:torch.ModelDef)
}
ModelDef::ModelDef(const ModelDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tensors_(from.tensors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  producer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_producer_name()) {
    producer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_producer_name(),
      GetArena());
  }
  producer_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_producer_version()) {
    producer_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_producer_version(),
      GetArena());
  }
  if (from._internal_has_main_module()) {
    main_module_ = new ::torch::ModuleDef(*from.main_module_);
  } else {
    main_module_ = nullptr;
  }
  proto_version_ = from.proto_version_;
  // @@protoc_insertion_point(copy_constructor:torch.ModelDef)
}

void ModelDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelDef_caffe2_2fproto_2ftorch_2eproto.base);
  producer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  producer_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&main_module_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proto_version_) -
      reinterpret_cast<char*>(&main_module_)) + sizeof(proto_version_));
}

ModelDef::~ModelDef() {
  // @@protoc_insertion_point(destructor:torch.ModelDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  producer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  producer_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete main_module_;
}

void ModelDef::ArenaDtor(void* object) {
  ModelDef* _this = reinterpret_cast< ModelDef* >(object);
  (void)_this;
}
void ModelDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelDef& ModelDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelDef_caffe2_2fproto_2ftorch_2eproto.base);
  return *internal_default_instance();
}


void ModelDef::Clear() {
// @@protoc_insertion_point(message_clear_start:torch.ModelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      producer_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      producer_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(main_module_ != nullptr);
      main_module_->Clear();
    }
  }
  proto_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 proto_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_proto_version(&has_bits);
          proto_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .torch.ModuleDef main_module = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_main_module(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string producer_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_producer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "torch.ModelDef.producer_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string producer_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_producer_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "torch.ModelDef.producer_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .torch.TensorDef tensors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:torch.ModelDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 proto_version = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_proto_version(), target);
  }

  // optional .torch.ModuleDef main_module = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::main_module(this), target, stream);
  }

  // optional string producer_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_producer_name().data(), static_cast<int>(this->_internal_producer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "torch.ModelDef.producer_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_producer_name(), target);
  }

  // optional string producer_version = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_producer_version().data(), static_cast<int>(this->_internal_producer_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "torch.ModelDef.producer_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_producer_version(), target);
  }

  // repeated .torch.TensorDef tensors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tensors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_tensors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:torch.ModelDef)
  return target;
}

size_t ModelDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:torch.ModelDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .torch.TensorDef tensors = 5;
  total_size += 1UL * this->_internal_tensors_size();
  for (const auto& msg : this->tensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string producer_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_producer_name());
    }

    // optional string producer_version = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_producer_version());
    }

    // optional .torch.ModuleDef main_module = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *main_module_);
    }

    // optional int64 proto_version = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_proto_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:torch.ModelDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:torch.ModelDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:torch.ModelDef)
    MergeFrom(*source);
  }
}

void ModelDef::MergeFrom(const ModelDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:torch.ModelDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensors_.MergeFrom(from.tensors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_producer_name(from._internal_producer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_producer_version(from._internal_producer_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_main_module()->::torch::ModuleDef::MergeFrom(from._internal_main_module());
    }
    if (cached_has_bits & 0x00000008u) {
      proto_version_ = from.proto_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:torch.ModelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelDef::CopyFrom(const ModelDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:torch.ModelDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelDef::IsInitialized() const {
  if (_internal_has_main_module()) {
    if (!main_module_->IsInitialized()) return false;
  }
  return true;
}

void ModelDef::InternalSwap(ModelDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tensors_.InternalSwap(&other->tensors_);
  producer_name_.Swap(&other->producer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  producer_version_.Swap(&other->producer_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelDef, proto_version_)
      + sizeof(ModelDef::proto_version_)
      - PROTOBUF_FIELD_OFFSET(ModelDef, main_module_)>(
          reinterpret_cast<char*>(&main_module_),
          reinterpret_cast<char*>(&other->main_module_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelDef::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace torch
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::torch::RecordRef* Arena::CreateMaybeMessage< ::torch::RecordRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::torch::RecordRef >(arena);
}
template<> PROTOBUF_NOINLINE ::torch::TensorDef* Arena::CreateMaybeMessage< ::torch::TensorDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::torch::TensorDef >(arena);
}
template<> PROTOBUF_NOINLINE ::torch::AttributeDef* Arena::CreateMaybeMessage< ::torch::AttributeDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::torch::AttributeDef >(arena);
}
template<> PROTOBUF_NOINLINE ::torch::ParameterDef* Arena::CreateMaybeMessage< ::torch::ParameterDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::torch::ParameterDef >(arena);
}
template<> PROTOBUF_NOINLINE ::torch::ModuleDef* Arena::CreateMaybeMessage< ::torch::ModuleDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::torch::ModuleDef >(arena);
}
template<> PROTOBUF_NOINLINE ::torch::LibDef* Arena::CreateMaybeMessage< ::torch::LibDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::torch::LibDef >(arena);
}
template<> PROTOBUF_NOINLINE ::torch::ModelDef* Arena::CreateMaybeMessage< ::torch::ModelDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::torch::ModelDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
