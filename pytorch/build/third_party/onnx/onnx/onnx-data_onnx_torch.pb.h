// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx/onnx-data_onnx_torch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "onnx/onnx_onnx_torch-ml.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto ONNX_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct ONNX_API TableStruct_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern ONNX_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto;
namespace onnx_torch { const ::std::string& GetEmptyStringAlreadyInited(); 
class MapProto;
class MapProtoDefaultTypeInternal;
ONNX_API extern MapProtoDefaultTypeInternal _MapProto_default_instance_;
class OptionalProto;
class OptionalProtoDefaultTypeInternal;
ONNX_API extern OptionalProtoDefaultTypeInternal _OptionalProto_default_instance_;
class SequenceProto;
class SequenceProtoDefaultTypeInternal;
ONNX_API extern SequenceProtoDefaultTypeInternal _SequenceProto_default_instance_;
}  // namespace onnx_torch
PROTOBUF_NAMESPACE_OPEN
template<> ONNX_API ::onnx_torch::MapProto* Arena::CreateMaybeMessage<::onnx_torch::MapProto>(Arena*);
template<> ONNX_API ::onnx_torch::OptionalProto* Arena::CreateMaybeMessage<::onnx_torch::OptionalProto>(Arena*);
template<> ONNX_API ::onnx_torch::SequenceProto* Arena::CreateMaybeMessage<::onnx_torch::SequenceProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onnx_torch {

enum SequenceProto_DataType : int {
  SequenceProto_DataType_UNDEFINED = 0,
  SequenceProto_DataType_TENSOR = 1,
  SequenceProto_DataType_SPARSE_TENSOR = 2,
  SequenceProto_DataType_SEQUENCE = 3,
  SequenceProto_DataType_MAP = 4,
  SequenceProto_DataType_OPTIONAL = 5
};
ONNX_API bool SequenceProto_DataType_IsValid(int value);
constexpr SequenceProto_DataType SequenceProto_DataType_DataType_MIN = SequenceProto_DataType_UNDEFINED;
constexpr SequenceProto_DataType SequenceProto_DataType_DataType_MAX = SequenceProto_DataType_OPTIONAL;
constexpr int SequenceProto_DataType_DataType_ARRAYSIZE = static_cast<int>(SequenceProto_DataType_DataType_MAX) + 1;

ONNX_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SequenceProto_DataType_descriptor();
template<typename T>
inline const std::string& SequenceProto_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SequenceProto_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SequenceProto_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SequenceProto_DataType_descriptor(), enum_t_value);
}
inline bool SequenceProto_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SequenceProto_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SequenceProto_DataType>(
    SequenceProto_DataType_descriptor(), name, value);
}
enum OptionalProto_DataType : int {
  OptionalProto_DataType_UNDEFINED = 0,
  OptionalProto_DataType_TENSOR = 1,
  OptionalProto_DataType_SPARSE_TENSOR = 2,
  OptionalProto_DataType_SEQUENCE = 3,
  OptionalProto_DataType_MAP = 4,
  OptionalProto_DataType_OPTIONAL = 5
};
ONNX_API bool OptionalProto_DataType_IsValid(int value);
constexpr OptionalProto_DataType OptionalProto_DataType_DataType_MIN = OptionalProto_DataType_UNDEFINED;
constexpr OptionalProto_DataType OptionalProto_DataType_DataType_MAX = OptionalProto_DataType_OPTIONAL;
constexpr int OptionalProto_DataType_DataType_ARRAYSIZE = static_cast<int>(OptionalProto_DataType_DataType_MAX) + 1;

ONNX_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionalProto_DataType_descriptor();
template<typename T>
inline const std::string& OptionalProto_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OptionalProto_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OptionalProto_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OptionalProto_DataType_descriptor(), enum_t_value);
}
inline bool OptionalProto_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OptionalProto_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OptionalProto_DataType>(
    OptionalProto_DataType_descriptor(), name, value);
}
// ===================================================================

class ONNX_API SequenceProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onnx_torch.SequenceProto) */ {
 public:
  inline SequenceProto() : SequenceProto(nullptr) {}
  virtual ~SequenceProto();

  SequenceProto(const SequenceProto& from);
  SequenceProto(SequenceProto&& from) noexcept;

  inline SequenceProto& operator=(const SequenceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SequenceProto& operator=(SequenceProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SequenceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SequenceProto* internal_default_instance() {
    return reinterpret_cast<const SequenceProto*>(
               &_SequenceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SequenceProto& a, SequenceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SequenceProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SequenceProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SequenceProto* New() const final {
    return CreateMaybeMessage<SequenceProto>(nullptr);
  }

  SequenceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SequenceProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SequenceProto& from);
  void MergeFrom(const SequenceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SequenceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onnx_torch.SequenceProto";
  }
  protected:
  explicit SequenceProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto);
    return ::descriptor_table_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SequenceProto_DataType DataType;
  static constexpr DataType UNDEFINED =
    SequenceProto_DataType_UNDEFINED;
  static constexpr DataType TENSOR =
    SequenceProto_DataType_TENSOR;
  static constexpr DataType SPARSE_TENSOR =
    SequenceProto_DataType_SPARSE_TENSOR;
  static constexpr DataType SEQUENCE =
    SequenceProto_DataType_SEQUENCE;
  static constexpr DataType MAP =
    SequenceProto_DataType_MAP;
  static constexpr DataType OPTIONAL =
    SequenceProto_DataType_OPTIONAL;
  static inline bool DataType_IsValid(int value) {
    return SequenceProto_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    SequenceProto_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    SequenceProto_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    SequenceProto_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return SequenceProto_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return SequenceProto_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return SequenceProto_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTensorValuesFieldNumber = 3,
    kSparseTensorValuesFieldNumber = 4,
    kSequenceValuesFieldNumber = 5,
    kMapValuesFieldNumber = 6,
    kOptionalValuesFieldNumber = 7,
    kNameFieldNumber = 1,
    kElemTypeFieldNumber = 2,
  };
  // repeated .onnx_torch.TensorProto tensor_values = 3;
  int tensor_values_size() const;
  private:
  int _internal_tensor_values_size() const;
  public:
  void clear_tensor_values();
  ::onnx_torch::TensorProto* mutable_tensor_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::TensorProto >*
      mutable_tensor_values();
  private:
  const ::onnx_torch::TensorProto& _internal_tensor_values(int index) const;
  ::onnx_torch::TensorProto* _internal_add_tensor_values();
  public:
  const ::onnx_torch::TensorProto& tensor_values(int index) const;
  ::onnx_torch::TensorProto* add_tensor_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::TensorProto >&
      tensor_values() const;

  // repeated .onnx_torch.SparseTensorProto sparse_tensor_values = 4;
  int sparse_tensor_values_size() const;
  private:
  int _internal_sparse_tensor_values_size() const;
  public:
  void clear_sparse_tensor_values();
  ::onnx_torch::SparseTensorProto* mutable_sparse_tensor_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::SparseTensorProto >*
      mutable_sparse_tensor_values();
  private:
  const ::onnx_torch::SparseTensorProto& _internal_sparse_tensor_values(int index) const;
  ::onnx_torch::SparseTensorProto* _internal_add_sparse_tensor_values();
  public:
  const ::onnx_torch::SparseTensorProto& sparse_tensor_values(int index) const;
  ::onnx_torch::SparseTensorProto* add_sparse_tensor_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::SparseTensorProto >&
      sparse_tensor_values() const;

  // repeated .onnx_torch.SequenceProto sequence_values = 5;
  int sequence_values_size() const;
  private:
  int _internal_sequence_values_size() const;
  public:
  void clear_sequence_values();
  ::onnx_torch::SequenceProto* mutable_sequence_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::SequenceProto >*
      mutable_sequence_values();
  private:
  const ::onnx_torch::SequenceProto& _internal_sequence_values(int index) const;
  ::onnx_torch::SequenceProto* _internal_add_sequence_values();
  public:
  const ::onnx_torch::SequenceProto& sequence_values(int index) const;
  ::onnx_torch::SequenceProto* add_sequence_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::SequenceProto >&
      sequence_values() const;

  // repeated .onnx_torch.MapProto map_values = 6;
  int map_values_size() const;
  private:
  int _internal_map_values_size() const;
  public:
  void clear_map_values();
  ::onnx_torch::MapProto* mutable_map_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::MapProto >*
      mutable_map_values();
  private:
  const ::onnx_torch::MapProto& _internal_map_values(int index) const;
  ::onnx_torch::MapProto* _internal_add_map_values();
  public:
  const ::onnx_torch::MapProto& map_values(int index) const;
  ::onnx_torch::MapProto* add_map_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::MapProto >&
      map_values() const;

  // repeated .onnx_torch.OptionalProto optional_values = 7;
  int optional_values_size() const;
  private:
  int _internal_optional_values_size() const;
  public:
  void clear_optional_values();
  ::onnx_torch::OptionalProto* mutable_optional_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::OptionalProto >*
      mutable_optional_values();
  private:
  const ::onnx_torch::OptionalProto& _internal_optional_values(int index) const;
  ::onnx_torch::OptionalProto* _internal_add_optional_values();
  public:
  const ::onnx_torch::OptionalProto& optional_values(int index) const;
  ::onnx_torch::OptionalProto* add_optional_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::OptionalProto >&
      optional_values() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 elem_type = 2;
  bool has_elem_type() const;
  private:
  bool _internal_has_elem_type() const;
  public:
  void clear_elem_type();
  ::PROTOBUF_NAMESPACE_ID::int32 elem_type() const;
  void set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_elem_type() const;
  void _internal_set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onnx_torch.SequenceProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::TensorProto > tensor_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::SparseTensorProto > sparse_tensor_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::SequenceProto > sequence_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::MapProto > map_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::OptionalProto > optional_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 elem_type_;
  friend struct ::TableStruct_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API MapProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onnx_torch.MapProto) */ {
 public:
  inline MapProto() : MapProto(nullptr) {}
  virtual ~MapProto();

  MapProto(const MapProto& from);
  MapProto(MapProto&& from) noexcept;

  inline MapProto& operator=(const MapProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapProto& operator=(MapProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapProto* internal_default_instance() {
    return reinterpret_cast<const MapProto*>(
               &_MapProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MapProto& a, MapProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MapProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapProto* New() const final {
    return CreateMaybeMessage<MapProto>(nullptr);
  }

  MapProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapProto& from);
  void MergeFrom(const MapProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onnx_torch.MapProto";
  }
  protected:
  explicit MapProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto);
    return ::descriptor_table_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 3,
    kStringKeysFieldNumber = 4,
    kNameFieldNumber = 1,
    kValuesFieldNumber = 5,
    kKeyTypeFieldNumber = 2,
  };
  // repeated int64 keys = 3;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_keys() const;
  void _internal_add_keys(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_keys();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 keys(int index) const;
  void set_keys(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_keys(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_keys();

  // repeated bytes string_keys = 4;
  int string_keys_size() const;
  private:
  int _internal_string_keys_size() const;
  public:
  void clear_string_keys();
  const std::string& string_keys(int index) const;
  std::string* mutable_string_keys(int index);
  void set_string_keys(int index, const std::string& value);
  void set_string_keys(int index, std::string&& value);
  void set_string_keys(int index, const char* value);
  void set_string_keys(int index, const void* value, size_t size);
  std::string* add_string_keys();
  void add_string_keys(const std::string& value);
  void add_string_keys(std::string&& value);
  void add_string_keys(const char* value);
  void add_string_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_keys();
  private:
  const std::string& _internal_string_keys(int index) const;
  std::string* _internal_add_string_keys();
  public:

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .onnx_torch.SequenceProto values = 5;
  bool has_values() const;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const ::onnx_torch::SequenceProto& values() const;
  ::onnx_torch::SequenceProto* release_values();
  ::onnx_torch::SequenceProto* mutable_values();
  void set_allocated_values(::onnx_torch::SequenceProto* values);
  private:
  const ::onnx_torch::SequenceProto& _internal_values() const;
  ::onnx_torch::SequenceProto* _internal_mutable_values();
  public:
  void unsafe_arena_set_allocated_values(
      ::onnx_torch::SequenceProto* values);
  ::onnx_torch::SequenceProto* unsafe_arena_release_values();

  // optional int32 key_type = 2;
  bool has_key_type() const;
  private:
  bool _internal_has_key_type() const;
  public:
  void clear_key_type();
  ::PROTOBUF_NAMESPACE_ID::int32 key_type() const;
  void set_key_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key_type() const;
  void _internal_set_key_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onnx_torch.MapProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::onnx_torch::SequenceProto* values_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_type_;
  friend struct ::TableStruct_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto;
};
// -------------------------------------------------------------------

class ONNX_API OptionalProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onnx_torch.OptionalProto) */ {
 public:
  inline OptionalProto() : OptionalProto(nullptr) {}
  virtual ~OptionalProto();

  OptionalProto(const OptionalProto& from);
  OptionalProto(OptionalProto&& from) noexcept;

  inline OptionalProto& operator=(const OptionalProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalProto& operator=(OptionalProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptionalProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionalProto* internal_default_instance() {
    return reinterpret_cast<const OptionalProto*>(
               &_OptionalProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OptionalProto& a, OptionalProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionalProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionalProto* New() const final {
    return CreateMaybeMessage<OptionalProto>(nullptr);
  }

  OptionalProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionalProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionalProto& from);
  void MergeFrom(const OptionalProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionalProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onnx_torch.OptionalProto";
  }
  protected:
  explicit OptionalProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto);
    return ::descriptor_table_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OptionalProto_DataType DataType;
  static constexpr DataType UNDEFINED =
    OptionalProto_DataType_UNDEFINED;
  static constexpr DataType TENSOR =
    OptionalProto_DataType_TENSOR;
  static constexpr DataType SPARSE_TENSOR =
    OptionalProto_DataType_SPARSE_TENSOR;
  static constexpr DataType SEQUENCE =
    OptionalProto_DataType_SEQUENCE;
  static constexpr DataType MAP =
    OptionalProto_DataType_MAP;
  static constexpr DataType OPTIONAL =
    OptionalProto_DataType_OPTIONAL;
  static inline bool DataType_IsValid(int value) {
    return OptionalProto_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    OptionalProto_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    OptionalProto_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    OptionalProto_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return OptionalProto_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return OptionalProto_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return OptionalProto_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTensorValueFieldNumber = 3,
    kSparseTensorValueFieldNumber = 4,
    kSequenceValueFieldNumber = 5,
    kMapValueFieldNumber = 6,
    kOptionalValueFieldNumber = 7,
    kElemTypeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .onnx_torch.TensorProto tensor_value = 3;
  bool has_tensor_value() const;
  private:
  bool _internal_has_tensor_value() const;
  public:
  void clear_tensor_value();
  const ::onnx_torch::TensorProto& tensor_value() const;
  ::onnx_torch::TensorProto* release_tensor_value();
  ::onnx_torch::TensorProto* mutable_tensor_value();
  void set_allocated_tensor_value(::onnx_torch::TensorProto* tensor_value);
  private:
  const ::onnx_torch::TensorProto& _internal_tensor_value() const;
  ::onnx_torch::TensorProto* _internal_mutable_tensor_value();
  public:
  void unsafe_arena_set_allocated_tensor_value(
      ::onnx_torch::TensorProto* tensor_value);
  ::onnx_torch::TensorProto* unsafe_arena_release_tensor_value();

  // optional .onnx_torch.SparseTensorProto sparse_tensor_value = 4;
  bool has_sparse_tensor_value() const;
  private:
  bool _internal_has_sparse_tensor_value() const;
  public:
  void clear_sparse_tensor_value();
  const ::onnx_torch::SparseTensorProto& sparse_tensor_value() const;
  ::onnx_torch::SparseTensorProto* release_sparse_tensor_value();
  ::onnx_torch::SparseTensorProto* mutable_sparse_tensor_value();
  void set_allocated_sparse_tensor_value(::onnx_torch::SparseTensorProto* sparse_tensor_value);
  private:
  const ::onnx_torch::SparseTensorProto& _internal_sparse_tensor_value() const;
  ::onnx_torch::SparseTensorProto* _internal_mutable_sparse_tensor_value();
  public:
  void unsafe_arena_set_allocated_sparse_tensor_value(
      ::onnx_torch::SparseTensorProto* sparse_tensor_value);
  ::onnx_torch::SparseTensorProto* unsafe_arena_release_sparse_tensor_value();

  // optional .onnx_torch.SequenceProto sequence_value = 5;
  bool has_sequence_value() const;
  private:
  bool _internal_has_sequence_value() const;
  public:
  void clear_sequence_value();
  const ::onnx_torch::SequenceProto& sequence_value() const;
  ::onnx_torch::SequenceProto* release_sequence_value();
  ::onnx_torch::SequenceProto* mutable_sequence_value();
  void set_allocated_sequence_value(::onnx_torch::SequenceProto* sequence_value);
  private:
  const ::onnx_torch::SequenceProto& _internal_sequence_value() const;
  ::onnx_torch::SequenceProto* _internal_mutable_sequence_value();
  public:
  void unsafe_arena_set_allocated_sequence_value(
      ::onnx_torch::SequenceProto* sequence_value);
  ::onnx_torch::SequenceProto* unsafe_arena_release_sequence_value();

  // optional .onnx_torch.MapProto map_value = 6;
  bool has_map_value() const;
  private:
  bool _internal_has_map_value() const;
  public:
  void clear_map_value();
  const ::onnx_torch::MapProto& map_value() const;
  ::onnx_torch::MapProto* release_map_value();
  ::onnx_torch::MapProto* mutable_map_value();
  void set_allocated_map_value(::onnx_torch::MapProto* map_value);
  private:
  const ::onnx_torch::MapProto& _internal_map_value() const;
  ::onnx_torch::MapProto* _internal_mutable_map_value();
  public:
  void unsafe_arena_set_allocated_map_value(
      ::onnx_torch::MapProto* map_value);
  ::onnx_torch::MapProto* unsafe_arena_release_map_value();

  // optional .onnx_torch.OptionalProto optional_value = 7;
  bool has_optional_value() const;
  private:
  bool _internal_has_optional_value() const;
  public:
  void clear_optional_value();
  const ::onnx_torch::OptionalProto& optional_value() const;
  ::onnx_torch::OptionalProto* release_optional_value();
  ::onnx_torch::OptionalProto* mutable_optional_value();
  void set_allocated_optional_value(::onnx_torch::OptionalProto* optional_value);
  private:
  const ::onnx_torch::OptionalProto& _internal_optional_value() const;
  ::onnx_torch::OptionalProto* _internal_mutable_optional_value();
  public:
  void unsafe_arena_set_allocated_optional_value(
      ::onnx_torch::OptionalProto* optional_value);
  ::onnx_torch::OptionalProto* unsafe_arena_release_optional_value();

  // optional int32 elem_type = 2;
  bool has_elem_type() const;
  private:
  bool _internal_has_elem_type() const;
  public:
  void clear_elem_type();
  ::PROTOBUF_NAMESPACE_ID::int32 elem_type() const;
  void set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_elem_type() const;
  void _internal_set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:onnx_torch.OptionalProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::onnx_torch::TensorProto* tensor_value_;
  ::onnx_torch::SparseTensorProto* sparse_tensor_value_;
  ::onnx_torch::SequenceProto* sequence_value_;
  ::onnx_torch::MapProto* map_value_;
  ::onnx_torch::OptionalProto* optional_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 elem_type_;
  friend struct ::TableStruct_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SequenceProto

// optional string name = 1;
inline bool SequenceProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SequenceProto::has_name() const {
  return _internal_has_name();
}
inline void SequenceProto::clear_name() {
  name_.ClearToEmpty(&GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SequenceProto::name() const {
  // @@protoc_insertion_point(field_get:onnx_torch.SequenceProto.name)
  return _internal_name();
}
inline void SequenceProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:onnx_torch.SequenceProto.name)
}
inline std::string* SequenceProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:onnx_torch.SequenceProto.name)
  return _internal_mutable_name();
}
inline const std::string& SequenceProto::_internal_name() const {
  return name_.Get();
}
inline void SequenceProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SequenceProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onnx_torch.SequenceProto.name)
}
inline void SequenceProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onnx_torch.SequenceProto.name)
}
inline void SequenceProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onnx_torch.SequenceProto.name)
}
inline std::string* SequenceProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SequenceProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx_torch.SequenceProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&GetEmptyStringAlreadyInited(), GetArena());
}
inline void SequenceProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onnx_torch.SequenceProto.name)
}

// optional int32 elem_type = 2;
inline bool SequenceProto::_internal_has_elem_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SequenceProto::has_elem_type() const {
  return _internal_has_elem_type();
}
inline void SequenceProto::clear_elem_type() {
  elem_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SequenceProto::_internal_elem_type() const {
  return elem_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SequenceProto::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx_torch.SequenceProto.elem_type)
  return _internal_elem_type();
}
inline void SequenceProto::_internal_set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  elem_type_ = value;
}
inline void SequenceProto::set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_elem_type(value);
  // @@protoc_insertion_point(field_set:onnx_torch.SequenceProto.elem_type)
}

// repeated .onnx_torch.TensorProto tensor_values = 3;
inline int SequenceProto::_internal_tensor_values_size() const {
  return tensor_values_.size();
}
inline int SequenceProto::tensor_values_size() const {
  return _internal_tensor_values_size();
}
inline ::onnx_torch::TensorProto* SequenceProto::mutable_tensor_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx_torch.SequenceProto.tensor_values)
  return tensor_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::TensorProto >*
SequenceProto::mutable_tensor_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx_torch.SequenceProto.tensor_values)
  return &tensor_values_;
}
inline const ::onnx_torch::TensorProto& SequenceProto::_internal_tensor_values(int index) const {
  return tensor_values_.Get(index);
}
inline const ::onnx_torch::TensorProto& SequenceProto::tensor_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx_torch.SequenceProto.tensor_values)
  return _internal_tensor_values(index);
}
inline ::onnx_torch::TensorProto* SequenceProto::_internal_add_tensor_values() {
  return tensor_values_.Add();
}
inline ::onnx_torch::TensorProto* SequenceProto::add_tensor_values() {
  // @@protoc_insertion_point(field_add:onnx_torch.SequenceProto.tensor_values)
  return _internal_add_tensor_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::TensorProto >&
SequenceProto::tensor_values() const {
  // @@protoc_insertion_point(field_list:onnx_torch.SequenceProto.tensor_values)
  return tensor_values_;
}

// repeated .onnx_torch.SparseTensorProto sparse_tensor_values = 4;
inline int SequenceProto::_internal_sparse_tensor_values_size() const {
  return sparse_tensor_values_.size();
}
inline int SequenceProto::sparse_tensor_values_size() const {
  return _internal_sparse_tensor_values_size();
}
inline ::onnx_torch::SparseTensorProto* SequenceProto::mutable_sparse_tensor_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx_torch.SequenceProto.sparse_tensor_values)
  return sparse_tensor_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::SparseTensorProto >*
SequenceProto::mutable_sparse_tensor_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx_torch.SequenceProto.sparse_tensor_values)
  return &sparse_tensor_values_;
}
inline const ::onnx_torch::SparseTensorProto& SequenceProto::_internal_sparse_tensor_values(int index) const {
  return sparse_tensor_values_.Get(index);
}
inline const ::onnx_torch::SparseTensorProto& SequenceProto::sparse_tensor_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx_torch.SequenceProto.sparse_tensor_values)
  return _internal_sparse_tensor_values(index);
}
inline ::onnx_torch::SparseTensorProto* SequenceProto::_internal_add_sparse_tensor_values() {
  return sparse_tensor_values_.Add();
}
inline ::onnx_torch::SparseTensorProto* SequenceProto::add_sparse_tensor_values() {
  // @@protoc_insertion_point(field_add:onnx_torch.SequenceProto.sparse_tensor_values)
  return _internal_add_sparse_tensor_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::SparseTensorProto >&
SequenceProto::sparse_tensor_values() const {
  // @@protoc_insertion_point(field_list:onnx_torch.SequenceProto.sparse_tensor_values)
  return sparse_tensor_values_;
}

// repeated .onnx_torch.SequenceProto sequence_values = 5;
inline int SequenceProto::_internal_sequence_values_size() const {
  return sequence_values_.size();
}
inline int SequenceProto::sequence_values_size() const {
  return _internal_sequence_values_size();
}
inline void SequenceProto::clear_sequence_values() {
  sequence_values_.Clear();
}
inline ::onnx_torch::SequenceProto* SequenceProto::mutable_sequence_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx_torch.SequenceProto.sequence_values)
  return sequence_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::SequenceProto >*
SequenceProto::mutable_sequence_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx_torch.SequenceProto.sequence_values)
  return &sequence_values_;
}
inline const ::onnx_torch::SequenceProto& SequenceProto::_internal_sequence_values(int index) const {
  return sequence_values_.Get(index);
}
inline const ::onnx_torch::SequenceProto& SequenceProto::sequence_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx_torch.SequenceProto.sequence_values)
  return _internal_sequence_values(index);
}
inline ::onnx_torch::SequenceProto* SequenceProto::_internal_add_sequence_values() {
  return sequence_values_.Add();
}
inline ::onnx_torch::SequenceProto* SequenceProto::add_sequence_values() {
  // @@protoc_insertion_point(field_add:onnx_torch.SequenceProto.sequence_values)
  return _internal_add_sequence_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::SequenceProto >&
SequenceProto::sequence_values() const {
  // @@protoc_insertion_point(field_list:onnx_torch.SequenceProto.sequence_values)
  return sequence_values_;
}

// repeated .onnx_torch.MapProto map_values = 6;
inline int SequenceProto::_internal_map_values_size() const {
  return map_values_.size();
}
inline int SequenceProto::map_values_size() const {
  return _internal_map_values_size();
}
inline void SequenceProto::clear_map_values() {
  map_values_.Clear();
}
inline ::onnx_torch::MapProto* SequenceProto::mutable_map_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx_torch.SequenceProto.map_values)
  return map_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::MapProto >*
SequenceProto::mutable_map_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx_torch.SequenceProto.map_values)
  return &map_values_;
}
inline const ::onnx_torch::MapProto& SequenceProto::_internal_map_values(int index) const {
  return map_values_.Get(index);
}
inline const ::onnx_torch::MapProto& SequenceProto::map_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx_torch.SequenceProto.map_values)
  return _internal_map_values(index);
}
inline ::onnx_torch::MapProto* SequenceProto::_internal_add_map_values() {
  return map_values_.Add();
}
inline ::onnx_torch::MapProto* SequenceProto::add_map_values() {
  // @@protoc_insertion_point(field_add:onnx_torch.SequenceProto.map_values)
  return _internal_add_map_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::MapProto >&
SequenceProto::map_values() const {
  // @@protoc_insertion_point(field_list:onnx_torch.SequenceProto.map_values)
  return map_values_;
}

// repeated .onnx_torch.OptionalProto optional_values = 7;
inline int SequenceProto::_internal_optional_values_size() const {
  return optional_values_.size();
}
inline int SequenceProto::optional_values_size() const {
  return _internal_optional_values_size();
}
inline void SequenceProto::clear_optional_values() {
  optional_values_.Clear();
}
inline ::onnx_torch::OptionalProto* SequenceProto::mutable_optional_values(int index) {
  // @@protoc_insertion_point(field_mutable:onnx_torch.SequenceProto.optional_values)
  return optional_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::OptionalProto >*
SequenceProto::mutable_optional_values() {
  // @@protoc_insertion_point(field_mutable_list:onnx_torch.SequenceProto.optional_values)
  return &optional_values_;
}
inline const ::onnx_torch::OptionalProto& SequenceProto::_internal_optional_values(int index) const {
  return optional_values_.Get(index);
}
inline const ::onnx_torch::OptionalProto& SequenceProto::optional_values(int index) const {
  // @@protoc_insertion_point(field_get:onnx_torch.SequenceProto.optional_values)
  return _internal_optional_values(index);
}
inline ::onnx_torch::OptionalProto* SequenceProto::_internal_add_optional_values() {
  return optional_values_.Add();
}
inline ::onnx_torch::OptionalProto* SequenceProto::add_optional_values() {
  // @@protoc_insertion_point(field_add:onnx_torch.SequenceProto.optional_values)
  return _internal_add_optional_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onnx_torch::OptionalProto >&
SequenceProto::optional_values() const {
  // @@protoc_insertion_point(field_list:onnx_torch.SequenceProto.optional_values)
  return optional_values_;
}

// -------------------------------------------------------------------

// MapProto

// optional string name = 1;
inline bool MapProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MapProto::has_name() const {
  return _internal_has_name();
}
inline void MapProto::clear_name() {
  name_.ClearToEmpty(&GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MapProto::name() const {
  // @@protoc_insertion_point(field_get:onnx_torch.MapProto.name)
  return _internal_name();
}
inline void MapProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:onnx_torch.MapProto.name)
}
inline std::string* MapProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:onnx_torch.MapProto.name)
  return _internal_mutable_name();
}
inline const std::string& MapProto::_internal_name() const {
  return name_.Get();
}
inline void MapProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MapProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onnx_torch.MapProto.name)
}
inline void MapProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onnx_torch.MapProto.name)
}
inline void MapProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onnx_torch.MapProto.name)
}
inline std::string* MapProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MapProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx_torch.MapProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&GetEmptyStringAlreadyInited(), GetArena());
}
inline void MapProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onnx_torch.MapProto.name)
}

// optional int32 key_type = 2;
inline bool MapProto::_internal_has_key_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MapProto::has_key_type() const {
  return _internal_has_key_type();
}
inline void MapProto::clear_key_type() {
  key_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapProto::_internal_key_type() const {
  return key_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapProto::key_type() const {
  // @@protoc_insertion_point(field_get:onnx_torch.MapProto.key_type)
  return _internal_key_type();
}
inline void MapProto::_internal_set_key_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  key_type_ = value;
}
inline void MapProto::set_key_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key_type(value);
  // @@protoc_insertion_point(field_set:onnx_torch.MapProto.key_type)
}

// repeated int64 keys = 3;
inline int MapProto::_internal_keys_size() const {
  return keys_.size();
}
inline int MapProto::keys_size() const {
  return _internal_keys_size();
}
inline void MapProto::clear_keys() {
  keys_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapProto::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MapProto::keys(int index) const {
  // @@protoc_insertion_point(field_get:onnx_torch.MapProto.keys)
  return _internal_keys(index);
}
inline void MapProto::set_keys(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx_torch.MapProto.keys)
}
inline void MapProto::_internal_add_keys(::PROTOBUF_NAMESPACE_ID::int64 value) {
  keys_.Add(value);
}
inline void MapProto::add_keys(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_keys(value);
  // @@protoc_insertion_point(field_add:onnx_torch.MapProto.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MapProto::_internal_keys() const {
  return keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MapProto::keys() const {
  // @@protoc_insertion_point(field_list:onnx_torch.MapProto.keys)
  return _internal_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MapProto::_internal_mutable_keys() {
  return &keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MapProto::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:onnx_torch.MapProto.keys)
  return _internal_mutable_keys();
}

// repeated bytes string_keys = 4;
inline int MapProto::_internal_string_keys_size() const {
  return string_keys_.size();
}
inline int MapProto::string_keys_size() const {
  return _internal_string_keys_size();
}
inline void MapProto::clear_string_keys() {
  string_keys_.Clear();
}
inline std::string* MapProto::add_string_keys() {
  // @@protoc_insertion_point(field_add_mutable:onnx_torch.MapProto.string_keys)
  return _internal_add_string_keys();
}
inline const std::string& MapProto::_internal_string_keys(int index) const {
  return string_keys_.Get(index);
}
inline const std::string& MapProto::string_keys(int index) const {
  // @@protoc_insertion_point(field_get:onnx_torch.MapProto.string_keys)
  return _internal_string_keys(index);
}
inline std::string* MapProto::mutable_string_keys(int index) {
  // @@protoc_insertion_point(field_mutable:onnx_torch.MapProto.string_keys)
  return string_keys_.Mutable(index);
}
inline void MapProto::set_string_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:onnx_torch.MapProto.string_keys)
  string_keys_.Mutable(index)->assign(value);
}
inline void MapProto::set_string_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx_torch.MapProto.string_keys)
  string_keys_.Mutable(index)->assign(std::move(value));
}
inline void MapProto::set_string_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx_torch.MapProto.string_keys)
}
inline void MapProto::set_string_keys(int index, const void* value, size_t size) {
  string_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx_torch.MapProto.string_keys)
}
inline std::string* MapProto::_internal_add_string_keys() {
  return string_keys_.Add();
}
inline void MapProto::add_string_keys(const std::string& value) {
  string_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx_torch.MapProto.string_keys)
}
inline void MapProto::add_string_keys(std::string&& value) {
  string_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onnx_torch.MapProto.string_keys)
}
inline void MapProto::add_string_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx_torch.MapProto.string_keys)
}
inline void MapProto::add_string_keys(const void* value, size_t size) {
  string_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx_torch.MapProto.string_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapProto::string_keys() const {
  // @@protoc_insertion_point(field_list:onnx_torch.MapProto.string_keys)
  return string_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapProto::mutable_string_keys() {
  // @@protoc_insertion_point(field_mutable_list:onnx_torch.MapProto.string_keys)
  return &string_keys_;
}

// optional .onnx_torch.SequenceProto values = 5;
inline bool MapProto::_internal_has_values() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || values_ != nullptr);
  return value;
}
inline bool MapProto::has_values() const {
  return _internal_has_values();
}
inline void MapProto::clear_values() {
  if (values_ != nullptr) values_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::onnx_torch::SequenceProto& MapProto::_internal_values() const {
  const ::onnx_torch::SequenceProto* p = values_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onnx_torch::SequenceProto*>(
      &::onnx_torch::_SequenceProto_default_instance_);
}
inline const ::onnx_torch::SequenceProto& MapProto::values() const {
  // @@protoc_insertion_point(field_get:onnx_torch.MapProto.values)
  return _internal_values();
}
inline void MapProto::unsafe_arena_set_allocated_values(
    ::onnx_torch::SequenceProto* values) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(values_);
  }
  values_ = values;
  if (values) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onnx_torch.MapProto.values)
}
inline ::onnx_torch::SequenceProto* MapProto::release_values() {
  _has_bits_[0] &= ~0x00000002u;
  ::onnx_torch::SequenceProto* temp = values_;
  values_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onnx_torch::SequenceProto* MapProto::unsafe_arena_release_values() {
  // @@protoc_insertion_point(field_release:onnx_torch.MapProto.values)
  _has_bits_[0] &= ~0x00000002u;
  ::onnx_torch::SequenceProto* temp = values_;
  values_ = nullptr;
  return temp;
}
inline ::onnx_torch::SequenceProto* MapProto::_internal_mutable_values() {
  _has_bits_[0] |= 0x00000002u;
  if (values_ == nullptr) {
    auto* p = CreateMaybeMessage<::onnx_torch::SequenceProto>(GetArena());
    values_ = p;
  }
  return values_;
}
inline ::onnx_torch::SequenceProto* MapProto::mutable_values() {
  // @@protoc_insertion_point(field_mutable:onnx_torch.MapProto.values)
  return _internal_mutable_values();
}
inline void MapProto::set_allocated_values(::onnx_torch::SequenceProto* values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete values_;
  }
  if (values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(values);
    if (message_arena != submessage_arena) {
      values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  values_ = values;
  // @@protoc_insertion_point(field_set_allocated:onnx_torch.MapProto.values)
}

// -------------------------------------------------------------------

// OptionalProto

// optional string name = 1;
inline bool OptionalProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OptionalProto::has_name() const {
  return _internal_has_name();
}
inline void OptionalProto::clear_name() {
  name_.ClearToEmpty(&GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OptionalProto::name() const {
  // @@protoc_insertion_point(field_get:onnx_torch.OptionalProto.name)
  return _internal_name();
}
inline void OptionalProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:onnx_torch.OptionalProto.name)
}
inline std::string* OptionalProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:onnx_torch.OptionalProto.name)
  return _internal_mutable_name();
}
inline const std::string& OptionalProto::_internal_name() const {
  return name_.Get();
}
inline void OptionalProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OptionalProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:onnx_torch.OptionalProto.name)
}
inline void OptionalProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:onnx_torch.OptionalProto.name)
}
inline void OptionalProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:onnx_torch.OptionalProto.name)
}
inline std::string* OptionalProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OptionalProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx_torch.OptionalProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&GetEmptyStringAlreadyInited(), GetArena());
}
inline void OptionalProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:onnx_torch.OptionalProto.name)
}

// optional int32 elem_type = 2;
inline bool OptionalProto::_internal_has_elem_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OptionalProto::has_elem_type() const {
  return _internal_has_elem_type();
}
inline void OptionalProto::clear_elem_type() {
  elem_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionalProto::_internal_elem_type() const {
  return elem_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptionalProto::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx_torch.OptionalProto.elem_type)
  return _internal_elem_type();
}
inline void OptionalProto::_internal_set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  elem_type_ = value;
}
inline void OptionalProto::set_elem_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_elem_type(value);
  // @@protoc_insertion_point(field_set:onnx_torch.OptionalProto.elem_type)
}

// optional .onnx_torch.TensorProto tensor_value = 3;
inline bool OptionalProto::_internal_has_tensor_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tensor_value_ != nullptr);
  return value;
}
inline bool OptionalProto::has_tensor_value() const {
  return _internal_has_tensor_value();
}
inline const ::onnx_torch::TensorProto& OptionalProto::_internal_tensor_value() const {
  const ::onnx_torch::TensorProto* p = tensor_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onnx_torch::TensorProto*>(
      &::onnx_torch::_TensorProto_default_instance_);
}
inline const ::onnx_torch::TensorProto& OptionalProto::tensor_value() const {
  // @@protoc_insertion_point(field_get:onnx_torch.OptionalProto.tensor_value)
  return _internal_tensor_value();
}
inline void OptionalProto::unsafe_arena_set_allocated_tensor_value(
    ::onnx_torch::TensorProto* tensor_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_value_);
  }
  tensor_value_ = tensor_value;
  if (tensor_value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onnx_torch.OptionalProto.tensor_value)
}
inline ::onnx_torch::TensorProto* OptionalProto::release_tensor_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::onnx_torch::TensorProto* temp = tensor_value_;
  tensor_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onnx_torch::TensorProto* OptionalProto::unsafe_arena_release_tensor_value() {
  // @@protoc_insertion_point(field_release:onnx_torch.OptionalProto.tensor_value)
  _has_bits_[0] &= ~0x00000002u;
  ::onnx_torch::TensorProto* temp = tensor_value_;
  tensor_value_ = nullptr;
  return temp;
}
inline ::onnx_torch::TensorProto* OptionalProto::_internal_mutable_tensor_value() {
  _has_bits_[0] |= 0x00000002u;
  if (tensor_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::onnx_torch::TensorProto>(GetArena());
    tensor_value_ = p;
  }
  return tensor_value_;
}
inline ::onnx_torch::TensorProto* OptionalProto::mutable_tensor_value() {
  // @@protoc_insertion_point(field_mutable:onnx_torch.OptionalProto.tensor_value)
  return _internal_mutable_tensor_value();
}
inline void OptionalProto::set_allocated_tensor_value(::onnx_torch::TensorProto* tensor_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_value_);
  }
  if (tensor_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_value)->GetArena();
    if (message_arena != submessage_arena) {
      tensor_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tensor_value_ = tensor_value;
  // @@protoc_insertion_point(field_set_allocated:onnx_torch.OptionalProto.tensor_value)
}

// optional .onnx_torch.SparseTensorProto sparse_tensor_value = 4;
inline bool OptionalProto::_internal_has_sparse_tensor_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || sparse_tensor_value_ != nullptr);
  return value;
}
inline bool OptionalProto::has_sparse_tensor_value() const {
  return _internal_has_sparse_tensor_value();
}
inline const ::onnx_torch::SparseTensorProto& OptionalProto::_internal_sparse_tensor_value() const {
  const ::onnx_torch::SparseTensorProto* p = sparse_tensor_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onnx_torch::SparseTensorProto*>(
      &::onnx_torch::_SparseTensorProto_default_instance_);
}
inline const ::onnx_torch::SparseTensorProto& OptionalProto::sparse_tensor_value() const {
  // @@protoc_insertion_point(field_get:onnx_torch.OptionalProto.sparse_tensor_value)
  return _internal_sparse_tensor_value();
}
inline void OptionalProto::unsafe_arena_set_allocated_sparse_tensor_value(
    ::onnx_torch::SparseTensorProto* sparse_tensor_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sparse_tensor_value_);
  }
  sparse_tensor_value_ = sparse_tensor_value;
  if (sparse_tensor_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onnx_torch.OptionalProto.sparse_tensor_value)
}
inline ::onnx_torch::SparseTensorProto* OptionalProto::release_sparse_tensor_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::onnx_torch::SparseTensorProto* temp = sparse_tensor_value_;
  sparse_tensor_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onnx_torch::SparseTensorProto* OptionalProto::unsafe_arena_release_sparse_tensor_value() {
  // @@protoc_insertion_point(field_release:onnx_torch.OptionalProto.sparse_tensor_value)
  _has_bits_[0] &= ~0x00000004u;
  ::onnx_torch::SparseTensorProto* temp = sparse_tensor_value_;
  sparse_tensor_value_ = nullptr;
  return temp;
}
inline ::onnx_torch::SparseTensorProto* OptionalProto::_internal_mutable_sparse_tensor_value() {
  _has_bits_[0] |= 0x00000004u;
  if (sparse_tensor_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::onnx_torch::SparseTensorProto>(GetArena());
    sparse_tensor_value_ = p;
  }
  return sparse_tensor_value_;
}
inline ::onnx_torch::SparseTensorProto* OptionalProto::mutable_sparse_tensor_value() {
  // @@protoc_insertion_point(field_mutable:onnx_torch.OptionalProto.sparse_tensor_value)
  return _internal_mutable_sparse_tensor_value();
}
inline void OptionalProto::set_allocated_sparse_tensor_value(::onnx_torch::SparseTensorProto* sparse_tensor_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sparse_tensor_value_);
  }
  if (sparse_tensor_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sparse_tensor_value)->GetArena();
    if (message_arena != submessage_arena) {
      sparse_tensor_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sparse_tensor_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sparse_tensor_value_ = sparse_tensor_value;
  // @@protoc_insertion_point(field_set_allocated:onnx_torch.OptionalProto.sparse_tensor_value)
}

// optional .onnx_torch.SequenceProto sequence_value = 5;
inline bool OptionalProto::_internal_has_sequence_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || sequence_value_ != nullptr);
  return value;
}
inline bool OptionalProto::has_sequence_value() const {
  return _internal_has_sequence_value();
}
inline void OptionalProto::clear_sequence_value() {
  if (sequence_value_ != nullptr) sequence_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::onnx_torch::SequenceProto& OptionalProto::_internal_sequence_value() const {
  const ::onnx_torch::SequenceProto* p = sequence_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onnx_torch::SequenceProto*>(
      &::onnx_torch::_SequenceProto_default_instance_);
}
inline const ::onnx_torch::SequenceProto& OptionalProto::sequence_value() const {
  // @@protoc_insertion_point(field_get:onnx_torch.OptionalProto.sequence_value)
  return _internal_sequence_value();
}
inline void OptionalProto::unsafe_arena_set_allocated_sequence_value(
    ::onnx_torch::SequenceProto* sequence_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sequence_value_);
  }
  sequence_value_ = sequence_value;
  if (sequence_value) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onnx_torch.OptionalProto.sequence_value)
}
inline ::onnx_torch::SequenceProto* OptionalProto::release_sequence_value() {
  _has_bits_[0] &= ~0x00000008u;
  ::onnx_torch::SequenceProto* temp = sequence_value_;
  sequence_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onnx_torch::SequenceProto* OptionalProto::unsafe_arena_release_sequence_value() {
  // @@protoc_insertion_point(field_release:onnx_torch.OptionalProto.sequence_value)
  _has_bits_[0] &= ~0x00000008u;
  ::onnx_torch::SequenceProto* temp = sequence_value_;
  sequence_value_ = nullptr;
  return temp;
}
inline ::onnx_torch::SequenceProto* OptionalProto::_internal_mutable_sequence_value() {
  _has_bits_[0] |= 0x00000008u;
  if (sequence_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::onnx_torch::SequenceProto>(GetArena());
    sequence_value_ = p;
  }
  return sequence_value_;
}
inline ::onnx_torch::SequenceProto* OptionalProto::mutable_sequence_value() {
  // @@protoc_insertion_point(field_mutable:onnx_torch.OptionalProto.sequence_value)
  return _internal_mutable_sequence_value();
}
inline void OptionalProto::set_allocated_sequence_value(::onnx_torch::SequenceProto* sequence_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sequence_value_;
  }
  if (sequence_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sequence_value);
    if (message_arena != submessage_arena) {
      sequence_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sequence_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sequence_value_ = sequence_value;
  // @@protoc_insertion_point(field_set_allocated:onnx_torch.OptionalProto.sequence_value)
}

// optional .onnx_torch.MapProto map_value = 6;
inline bool OptionalProto::_internal_has_map_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || map_value_ != nullptr);
  return value;
}
inline bool OptionalProto::has_map_value() const {
  return _internal_has_map_value();
}
inline void OptionalProto::clear_map_value() {
  if (map_value_ != nullptr) map_value_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::onnx_torch::MapProto& OptionalProto::_internal_map_value() const {
  const ::onnx_torch::MapProto* p = map_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onnx_torch::MapProto*>(
      &::onnx_torch::_MapProto_default_instance_);
}
inline const ::onnx_torch::MapProto& OptionalProto::map_value() const {
  // @@protoc_insertion_point(field_get:onnx_torch.OptionalProto.map_value)
  return _internal_map_value();
}
inline void OptionalProto::unsafe_arena_set_allocated_map_value(
    ::onnx_torch::MapProto* map_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_value_);
  }
  map_value_ = map_value;
  if (map_value) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onnx_torch.OptionalProto.map_value)
}
inline ::onnx_torch::MapProto* OptionalProto::release_map_value() {
  _has_bits_[0] &= ~0x00000010u;
  ::onnx_torch::MapProto* temp = map_value_;
  map_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onnx_torch::MapProto* OptionalProto::unsafe_arena_release_map_value() {
  // @@protoc_insertion_point(field_release:onnx_torch.OptionalProto.map_value)
  _has_bits_[0] &= ~0x00000010u;
  ::onnx_torch::MapProto* temp = map_value_;
  map_value_ = nullptr;
  return temp;
}
inline ::onnx_torch::MapProto* OptionalProto::_internal_mutable_map_value() {
  _has_bits_[0] |= 0x00000010u;
  if (map_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::onnx_torch::MapProto>(GetArena());
    map_value_ = p;
  }
  return map_value_;
}
inline ::onnx_torch::MapProto* OptionalProto::mutable_map_value() {
  // @@protoc_insertion_point(field_mutable:onnx_torch.OptionalProto.map_value)
  return _internal_mutable_map_value();
}
inline void OptionalProto::set_allocated_map_value(::onnx_torch::MapProto* map_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_value_;
  }
  if (map_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_value);
    if (message_arena != submessage_arena) {
      map_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  map_value_ = map_value;
  // @@protoc_insertion_point(field_set_allocated:onnx_torch.OptionalProto.map_value)
}

// optional .onnx_torch.OptionalProto optional_value = 7;
inline bool OptionalProto::_internal_has_optional_value() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || optional_value_ != nullptr);
  return value;
}
inline bool OptionalProto::has_optional_value() const {
  return _internal_has_optional_value();
}
inline void OptionalProto::clear_optional_value() {
  if (optional_value_ != nullptr) optional_value_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::onnx_torch::OptionalProto& OptionalProto::_internal_optional_value() const {
  const ::onnx_torch::OptionalProto* p = optional_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::onnx_torch::OptionalProto*>(
      &::onnx_torch::_OptionalProto_default_instance_);
}
inline const ::onnx_torch::OptionalProto& OptionalProto::optional_value() const {
  // @@protoc_insertion_point(field_get:onnx_torch.OptionalProto.optional_value)
  return _internal_optional_value();
}
inline void OptionalProto::unsafe_arena_set_allocated_optional_value(
    ::onnx_torch::OptionalProto* optional_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optional_value_);
  }
  optional_value_ = optional_value;
  if (optional_value) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onnx_torch.OptionalProto.optional_value)
}
inline ::onnx_torch::OptionalProto* OptionalProto::release_optional_value() {
  _has_bits_[0] &= ~0x00000020u;
  ::onnx_torch::OptionalProto* temp = optional_value_;
  optional_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::onnx_torch::OptionalProto* OptionalProto::unsafe_arena_release_optional_value() {
  // @@protoc_insertion_point(field_release:onnx_torch.OptionalProto.optional_value)
  _has_bits_[0] &= ~0x00000020u;
  ::onnx_torch::OptionalProto* temp = optional_value_;
  optional_value_ = nullptr;
  return temp;
}
inline ::onnx_torch::OptionalProto* OptionalProto::_internal_mutable_optional_value() {
  _has_bits_[0] |= 0x00000020u;
  if (optional_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::onnx_torch::OptionalProto>(GetArena());
    optional_value_ = p;
  }
  return optional_value_;
}
inline ::onnx_torch::OptionalProto* OptionalProto::mutable_optional_value() {
  // @@protoc_insertion_point(field_mutable:onnx_torch.OptionalProto.optional_value)
  return _internal_mutable_optional_value();
}
inline void OptionalProto::set_allocated_optional_value(::onnx_torch::OptionalProto* optional_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete optional_value_;
  }
  if (optional_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(optional_value);
    if (message_arena != submessage_arena) {
      optional_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  optional_value_ = optional_value;
  // @@protoc_insertion_point(field_set_allocated:onnx_torch.OptionalProto.optional_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace onnx_torch

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onnx_torch::SequenceProto_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onnx_torch::SequenceProto_DataType>() {
  return ::onnx_torch::SequenceProto_DataType_descriptor();
}
template <> struct is_proto_enum< ::onnx_torch::OptionalProto_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onnx_torch::OptionalProto_DataType>() {
  return ::onnx_torch::OptionalProto_DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onnx_2fonnx_2ddata_5fonnx_5ftorch_2eproto
